import { useState, useEffect } from 'react';
import axios from 'axios';
import './LearningPage.css';

const LearningPage = () => {
  const [learningData, setLearningData] = useState({
    progress: 0,
    currentCourse: '',
    hoursStudied: 0,
    goals: []
  });
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState(null);
  const [newGoal, setNewGoal] = useState('');

  useEffect(() => {
    const fetchLearningData = async () => {
      try {
        const response = await axios.get('http://127.0.0.1:8000/learning');
        setLearningData(response.data);
      } catch (err) {
        setError(err.response?.data?.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
      } finally {
        setIsLoading(false);
      }
    };

    fetchLearningData();
  }, []);

  const addLearningGoal = async () => {
    if (!newGoal.trim()) return;
    
    try {
      setIsLoading(true);
      const response = await axios.post('http://127.0.0.1:8000/learning/goals', {
        text: newGoal
      });
      
      setLearningData(prev => ({
        ...prev,
        goals: [...prev.goals, response.data]
      }));
      setNewGoal('');
    } catch (err) {
      setError(err.response?.data?.message || '–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ü–µ–ª–∏');
    } finally {
      setIsLoading(false);
    }
  };

  const completeGoal = async (goalId) => {
    try {
      await axios.patch(`http://127.0.0.1:8000/learning/goals/${goalId}`, {
        completed: true
      });
      
      setLearningData(prev => ({
        ...prev,
        goals: prev.goals.map(goal => 
          goal.id === goalId ? { ...goal, completed: true } : goal
        )
      }));
    } catch (err) {
      setError(err.response?.data?.message || '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–ª–∏');
    }
  };

  return (
    <div className="learning-container">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
      <header className="learning-header">
        <h1>–ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –æ–±—É—á–µ–Ω–∏–∏</h1>
        <p>–û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Å–≤–æ–∏ —É—Å–ø–µ—Ö–∏ –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è</p>
      </header>

      {/* –ë–ª–æ–∫ —Å –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π */}
      <div className="stats-grid">
        <div className="stat-card">
          <div className="stat-icon">üìä</div>
          <h3>–û–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å</h3>
          <div className="progress-bar">
            <div 
              className="progress-fill"
              style={{ width: `${learningData.progress}%` }}
            ></div>
          </div>
          <span className="stat-value">{learningData.progress}%</span>
        </div>

        <div className="stat-card">
          <div className="stat-icon">üìö</div>
          <h3>–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å</h3>
          <p className="stat-value">
            {learningData.currentCourse || '–ù–µ –≤—ã–±—Ä–∞–Ω'}
          </p>
        </div>

        <div className="stat-card">
          <div className="stat-icon">‚è±Ô∏è</div>
          <h3>–ß–∞—Å–æ–≤ –∏–∑—É—á–µ–Ω–æ</h3>
          <p className="stat-value">
            {learningData.hoursStudied} —á–∞—Å–æ–≤
          </p>
        </div>
      </div>

      {/* –ë–ª–æ–∫ —Ü–µ–ª–µ–π –æ–±—É—á–µ–Ω–∏—è */}
      <section className="goals-section">
        <div className="section-header">
          <h2>–ú–æ–∏ —É—á–µ–±–Ω—ã–µ —Ü–µ–ª–∏</h2>
          <div className="input-group">
            <input
              type="text"
              value={newGoal}
              onChange={(e) => setNewGoal(e.target.value)}
              placeholder="–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ü–µ–ª—å..."
              disabled={isLoading}
            />
            <button 
              onClick={addLearningGoal}
              disabled={isLoading || !newGoal.trim()}
            >
              {isLoading ? '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ...' : '–î–æ–±–∞–≤–∏—Ç—å'}
            </button>
          </div>
        </div>

        {error && <div className="error-message">{error}</div>}

        <ul className="goals-list">
          {learningData.goals.map(goal => (
            <li key={goal.id} className={`goal-item ${goal.completed ? 'completed' : ''}`}>
              <label>
                <input
                  type="checkbox"
                  checked={goal.completed}
                  onChange={() => !goal.completed && completeGoal(goal.id)}
                  disabled={goal.completed || isLoading}
                />
                <span>{goal.text}</span>
              </label>
              {goal.completed && (
                <span className="completed-badge">–í—ã–ø–æ–ª–Ω–µ–Ω–æ</span>
              )}
            </li>
          ))}
        </ul>
      </section>

      {/* –ë–ª–æ–∫ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π */}
      <section className="achievements-section">
        <h2>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è</h2>
        <div className="achievements-grid">
          <div className="achievement-card">
            <div className="achievement-icon">üèÜ</div>
            <h3>–ó–∞–≤–µ—Ä—à–∏–ª –∫—É—Ä—Å React</h3>
            <p>15 –æ–∫—Ç—è–±—Ä—è 2023</p>
          </div>
          <div className="achievement-card">
            <div className="achievement-icon">üéØ</div>
            <h3>100 —á–∞—Å–æ–≤ –∫–æ–¥–∏–Ω–≥–∞</h3>
            <p>1 –Ω–æ—è–±—Ä—è 2023</p>
          </div>
        </div>
      </section>
    </div>
  );
};

export default LearningPage;